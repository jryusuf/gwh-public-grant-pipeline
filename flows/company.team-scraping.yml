id: scraping
namespace: company.team

tasks:
  - id: scrape
    type: io.kestra.plugin.scripts.python.Script
    beforeCommands:
      - pip install supabase requests markdownify
    taskRunner:
        type: io.kestra.plugin.core.runner.Process
    containerImage: pyhton:slim
    warningOnStdErr: false
    script: |
      import os
      from supabase import create_client, Client
      from kestra import Kestra
      import requests
      from markdownify import markdownify as md

      url = "{{kv('supabase_url')}}"
      key = "{{kv('supabase_key')}}"
      body = {{trigger.body}}

      logger = Kestra.logger()
      supabase: Client = create_client(url, key)

      logger.info("Updating result status")
      scrape_response = (supabase.table("search_results").update({"status":"running"}).eq("id", "{{trigger.body["record"]["id"]}}").execute())

      headers = {
          "Authorization": "Bearer {{kv('brd_token')}}",
          "Content-Type": "application/json"
      }
      data = {
          "zone": "web_unlocker1",
          "url": "{{trigger.body["record"]["url"]}}",
          "format": "raw"
      }

      logger.info("Starting scrape request")
      try:
        scrape_result = requests.post("https://api.brightdata.com/request", json=data, headers=headers)

        if scrape_result.status_code == 200:
          logger.info("Scrape successfull, inserting new scrape result")
          scrape_result_response = (supabase.table("scrape_results").insert({
            "search_result_id" : "{{trigger.body["record"]["id"]}}",
            "status_code" : scrape_result.status_code,
            "markdown" : md(scrape_result.text)
          }).execute())
          logger.info("Updating status as complete")
          scrape_response = (supabase.table("search_results").update({"status":"complete"}).eq("id", "{{trigger.body["record"]["id"]}}").execute())
        
        else:
          logger.error("Scrape failed, updating status")
          scrape_response = (supabase.table("search_results").update({"status":"failed"}).eq("id", "{{trigger.body["record"]["id"]}}").execute())
      except Exception as e:
        logger.error("Scrape failed, updating status")
        logger.error(f"Exception: {e}")
        scrape_response = (supabase.table("search_results").update({"status":"failed"}).eq("id", "{{trigger.body["record"]["id"]}}").execute())
  
triggers:
  - id: webhook
    type: io.kestra.plugin.core.trigger.Webhook
    key: scrape

